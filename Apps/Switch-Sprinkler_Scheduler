/* Switch or Sprinkler Scheduler
*  
*	2022 T. K. (kampto)
*	NOTES: Automate sprinkler system using switchess and relays 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.0.0	2023-05-07	kampto    	First Build from scratch.
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Switch or Sprinkler Scheduler"
	state.version = "1.0.0"
    }

definition (
	name: "Switch or Sprinkler Scheduler", namespace: "kampto", author: "T. K.",
	description: "Automate Switches, Relays, Sprinklers",
	category: "General",
	iconUrl: "",
	iconX2Url: "",
    //importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/DeviceTimeActiveTracker_Child",
    //documentationLink: "https://community.hubitat.com/t/beta-device-active-time-tracker-app-device-on-timer-and-on-counter-with-variables-access/102896"
	)

preferences {page(name: "mainPage")}

//******************************************************  Page/Input Set-Up  ******************************************************//
def mainPage() {
    if(app.getInstallationState() != "COMPLETE") {hide=false} else {hide=true}  //// ver1.2.0
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    //if (resetHour == null) {resetHour = 0}   //// ver1.0.1
    //if (refreshMinutes == null) {refreshMinutes = 10}    //// ver1.1.3
    //if (refreshSeconds == null) {refreshSeconds = 30}    //// ver1.1.3
    //if (capabilitySelect == null) {capabilitySelect = 1}
    if (allTotal == null) {allTotal = 0}   //// ver1.1.3
    //state.byPassBool = false  //// ver1.1.4
                    
  dynamicPage(name: "mainPage", title: "", install: true, uninstall: true) {
  displayTitle() 
  section (getFormat("header","Initial Set-Up:"),hideable: true, hidden: hide){  
        label title: "<b>1. Name this child App</b>", required: true, submitOnChange: true, width: 3
        //input name: "capabilitySelect", type: "enum", title: "<b>2. Select a capability to track.</b>", required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"]], width: 3, submitOnChange: true, displayDuringSetup: false
        input "DeVices", "capability.switch", title: "<b>2. Select Devices to Track Switch On Time</b>", required: true, multiple: true, submitOnChange: true, width: 5    
        //else {input "DeVices", "capability.switch", title: "<b>3. Select Devices to Track Switch On Time</b>", multiple: true, submitOnChange: true, width: 5}
        
    DeVices.each {dev ->
	    if(!state.DeVices["$dev.id"]) {
             state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, sun: false, mon: false, tue: false, wed: false, thur: false, fri: false, sat: false, time: "", onTime: "", allTime: 0, startTime: 0, durTime: 0, counts: 0]  
             state.DeVicesList += dev.id   
             }
	    }
   }
  section {                         
     if(DeVices) {
           	if(DeVices.id.sort() != state.DeVicesList.sort()) { 
				state.DeVicesList = DeVices.id
				Map newState = [:]
				//DeVices.each{d ->  newState["$d.id"] = state.DeVices["$d.id"]}
                DeVices.each{z ->  newState["$z.id"] = state.DeVices["$z.id"]}
				state.DeVices = newState
				}
                
      updated()
      paragraph displayTable()
	    ///////////////////////// Enter Start Time 
        if(state.newStartTime) {
        input name: "newStartTime", type: "number", title:"<b>Enter Start Time in Minutes, Applies to all days. <small>Hit Enter</small>", defaultValue: "", required: false,  submitOnChange:true, width: 8, style: 'margin-left:10px'
          if(newStartTime) {
             state.DeVices[state.newStartTime].startTime = newStartTime
             state.remove("newStartTime")
		     app.removeSetting("newStartTime")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		  } 
          else if(state.remStartTime) {
		     state.DeVices[state.remStartTime].startTime = ""
             state.remove("remStartTime")  
			  paragraph "<script>{changeSubmit(this)}</script>"
		      }
         endif
        ///////////////////////// Enter Run Duration  
        if(state.newDurTime) {
        input name: "newDurTime", type: "number", title:"<b>Enter Run Duration in Minutes, Applies to all days. <small>Hit Enter</small>", defaultValue: "", required: false,  submitOnChange:true, width: 8, style: 'margin-left:10px'
          if(newDurTime) {
             state.DeVices[state.newDurTime].durTime = newDurTime
             state.remove("newDurTime")
		     app.removeSetting("newDurTime")
             paragraph "<script>{changeSubmit(this)}</script>"
		     }
		  } 
          else if(state.remDurTime) {
		     state.DeVices[state.remDurTime].durTime = ""
             state.remove("remDurTime")  
			  paragraph "<script>{changeSubmit(this)}</script>"
		      } 
          endif
        
         // input "reset", "button", title: "RESET Periodic Times, Counts & Update Variables", width: 5   //// ver1.0.1
          input "refresh", "button", title: "REFRESH Table & Update Variables", width: 4    //// ver1.0.3
          //input name: "inDaysC", type: "bool", title:getFormat("important2","Display Cumulative in Days?"), defaultValue:false, submitOnChange:true, width: 3   //// ver1.1.6
		}
  }
//********************************************************* Input Section 2 *******************************************************//        
     section(getFormat("header","Advanced Options:"),hideable: true, hidden: false) {
        input name: "viewResfreshBool", type: "bool", title: getFormat("important2","<b>View or Change Auto variable Update details?</b><br>(Default is every 10min, for Devices with a variable and box checked in table)"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'   //// ver1.1.8
              if (viewResfreshBool) {
              input name: "autoRefresh", type: "enum", title: getFormat("important","<b>Auto Update Variables every XX Minutes or Seconds after the hour?</b><br><small>Applies to Auto Update Checked Box(s) in Table only</small>"), defaultValue:"Minutes", submitOnChange:true, options: ["Don't Update", "Minutes","Seconds"], required: false, style: 'margin-left:60px'
               if (autoRefresh == "Seconds") {input name: "refreshSeconds", type: "enum", title: getFormat("lessImportant",">> Select Variables Update interval in Seconds for On/Active devices only.<br><small>Default = 30sec<br>Example:7:00:00, 7:00:30, 7:01:00,...<br>NOTE: Faster updates will increase hub load.</small>"), defaultValue: "30", submitOnChange: true,  options: ["5","10","15","20","30"], required: false, style: 'margin-left:110px'
                 }
               else if (autoRefresh == "Minutes") {input name: "refreshMinutes", type: "enum", title: getFormat("lessImportant",">> Select Variables Update interval in Minutes for On/Active devices only.<br><small>Default = 10min<br>Example:7:00, 7:10, 7:20,...</small>"), defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, style: 'margin-left:110px'
                 }
               endif
              }
          //input name: "autoResetBool", type: "bool", title: getFormat("important2","<b>Daily Reset all Timers & Update Variables at a specific Hour?</b><br>(Does not Reset Cumulative Timer)<br><small>Applies to All</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          //if (autoResetBool) {
            //  if (capabilitySelect == "4" || capabilitySelect == "5" ||capabilitySelect == "6") { input name: "dayCountsReset", type: "bool", title: getFormat("important","Also Reset All On Counters and Min/Max values?"), defaultValue:false, submitOnChange:false, style: 'margin-left:60px'  }  ////  ver1.2.1 
              //else  input name: "dayCountsReset", type: "bool", title: getFormat("important","Also Reset All On Counters?"), defaultValue:false, submitOnChange:false, style: 'margin-left:60px'   
             //input name: "resetHour", type: "enum", title: getFormat("lessImportant",">> Select an Hour for Auto Reset Everyday, 0 to 23.<br><small>Default = 0 (Midnight)</small>"), defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, style: 'margin-left:110px'
            // }
          
          //input name: "resetWhenOnBool", type: "bool", title: getFormat("important2","<b>Reset & Restart all Timers & Update Variables when any Device becomes On/Active?</b><br>(Does not Reset Cumulative Times or Counts)<br><small>Applies to All</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          
          //input name: "remoteResetVarBool", type: "bool", title: getFormat("important2","<b>Remote Reset Times & Counts by Hub Variable outside of App</b><br>(For Optional Rule Machine access)<br><small>Applies to Remote Resest Checked Box(s) in Table only</small>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          //if (remoteResetVarBool) {
            //input name: "resetVarAllBool", type: "bool", title: "Also Reset Cumulative total also with same variable?", defaultValue:false, submitOnChange:true, style: 'margin-left:70px'  
            //input "resetVar", "enum", title: getFormat("important","Select Boolean Hub Variable to Reset checkboxed PERIODIC only Timers/Counts.<br>Must make a Boolean variable first in Settings/Hub Variables.<br>In Rule Machine set variable 'true' to trigger."), submitOnChange: true, style: 'margin-left:60px',
			//	options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
            //input "resetVarC", "enum", title: getFormat("important","Select Boolean Hub Variable to Reset checkboxed CUMULATIVE & PERIODIC Timers/Counts"), submitOnChange: true, style: 'margin-left:60px',
			//	options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}  
              // }
          input name: "formatBool", type: "bool", title: getFormat("important2","<b>Enable Alternative UI formatting with table sort?</b>"), defaultValue:false, submitOnChange:true, style: 'margin-left:10px'  //// ver1.2.0
          input name: "logEnableBool", type: "bool", title: getFormat("important2","<b>Enable Logging of App based Resets and Variable Refresh/Updates?</b><br><small>Shuts off in 1hr</small>"), defaultValue:true, submitOnChange:true, style: 'margin-left:10px'  //// ver1.1.3
      }
      

//**********************************************************  Notes Section ******************************************************//        
   section(getFormat("header","Usage Notes:"), hideable: true, hidden: hide) {   //// ver1.1.5
      paragraph getFormat("lessImportant","<ul>"+    
      "<li>Select day chceck boxes, enter start time and run Duration.</li>"+
	  "<li>Table will not auto refresh, you must hit refresh button.</li>"+
      "</ul>")
      }
  }
}

//**********************************************************  MAIN PAGE TABLE  ******************************************************//
String displayTable() {
    if(state.resetTotal) {  //// Reset Cumulative time and counts per device        
		def dev = DeVices.find{"$it.id" == state.resetTotal}
        state.DeVices[state.resetTotal].start = now()
        state.DeVices[state.resetTotal].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.DeVices[state.resetTotal].allTime = 0
        state.remove("resetTotal")
	    }
    ////////////// Sunday - Saturday Check Boxes
    if(state.sunCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunCheckedBox}  
	    state.DeVices[state.sunCheckedBox].sun = true
        state.remove("sunCheckedBox")
	    }
	else if(state.sunUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.sunUnCheckedBox}  
	    state.DeVices[state.sunUnCheckedBox].sun = false
        state.remove("sunUnCheckedBox")
	    }
    endif
    if(state.monCheckedBox) {def dev = DeVices.find{"$it.id" == state.monCheckedBox}  
	    state.DeVices[state.monCheckedBox].mon = true
        state.remove("monCheckedBox")
	    }
	else if(state.monUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.monUnCheckedBox}  
	    state.DeVices[state.monUnCheckedBox].sun = false
        state.remove("monUnCheckedBox")
	    }
    endif
    if(state.tueCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueCheckedBox}  
	    state.DeVices[state.tueCheckedBox].tue = true
        state.remove("tueCheckedBox")
	    }
	else if(state.tueUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.tueUnCheckedBox}  
	    state.DeVices[state.tueUnCheckedBox].tue = false
        state.remove("tueUnCheckedBox")
	    }
    endif
    if(state.wedCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedCheckedBox}  
	    state.DeVices[state.wedCheckedBox].wed = true
        state.remove("wedCheckedBox")
	    }
	else if(state.wedUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.wedUnCheckedBox}  
	    state.DeVices[state.wedUnCheckedBox].wed = false
        state.remove("wedUnCheckedBox")
	    }
    endif
    if(state.thurCheckedBox) {def dev = DeVices.find{"$it.id" == state.thurCheckedBox}  
	    state.DeVices[state.thurCheckedBox].thur = true
        state.remove("thurCheckedBox")
	    }
	else if(state.thurUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.thurUnCheckedBox}  
	    state.DeVices[state.thurUnCheckedBox].thur = false
        state.remove("thurUnCheckedBox")
	    }
    endif
    if(state.friCheckedBox) {def dev = DeVices.find{"$it.id" == state.friCheckedBox}  
	    state.DeVices[state.friCheckedBox].fri = true
        state.remove("friCheckedBox")
	    }
	else if(state.friUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.friUnCheckedBox}  
	    state.DeVices[state.friUnCheckedBox].fri = false
        state.remove("friUnCheckedBox")
	    }
    endif
    if(state.satCheckedBox) {def dev = DeVices.find{"$it.id" == state.satCheckedBox}  
	    state.DeVices[state.satCheckedBox].sat = true
        state.remove("satCheckedBox")
	    }
	else if(state.satUnCheckedBox) {def dev = DeVices.find{"$it.id" == state.satUnCheckedBox}  
	    state.DeVices[state.satUnCheckedBox].sat = false
        state.remove("satUnCheckedBox")
	    }
    endif
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
        str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 4px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
        "<thead><tr style='border-bottom:2px solid black'><th>zone</th>" +	
        "<th>Device</th>" +
		"<th style='width: 100px !important'>Start Time</th>" +
        "<th style='width: 100px !important'>Run Time</th>" +
        "<th>State</th>" +    
        "<th>Sun</th>" +
        "<th>Mon</th>" +
        "<th>Tue</th>" +
        "<th>Wed</th>" +
        "<th>Thur</th>" +
        "<th>Fri</th>" +   
        "<th>Sat</th>" +
        "<th>On<br>Counts" +    
        "<th>Total<br>On Time</th>"+
        "<th>Reset<br>On Time</th></tr></thead>"
         	   
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisStartTime = state.DeVices["$dev.id"].startTime
        String thisDurTime = state.DeVices["$dev.id"].durTime
        
        ////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   
        int total = state.DeVices["$dev.id"].total / 1000    
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
        ////////// Total All Cumalative Time Calc   
        int allTotal = state.DeVices["$dev.id"].allTime /1000
        int intAllTime = allTotal
        int allHours = allTotal / 3600  
	    allTotal = allTotal % 3600
	    int allMins = allTotal / 60
	    int allSecs = allTotal % 60
        String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"
            float AllTimeDays = (intAllTime / 86400) as float  
            if (inDaysC) {allTimeT = String.format("%.3f", AllTimeDays)} // For table Only  
            else {allTimeT = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"}  // For table Only
                       
        if (logEnableBool) {log.info "App: ${app.label} - Page Refresh, Device ${dev.id}, Var *${thisVar}* to ${time} or ${intTime}sec, Cumulative Var *${thisVarC}* ${allTime}time, ${AllTimeDays}days, ${intAllTime}sec, Counts Var *${thisVarC}* Counts=${counts}"}  //// Added ver1.1.3
                
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String resetTotal = buttonLink("z$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px") 
        String startTime = thisStartTime ? buttonLink("o$dev.id", thisStartTime, "purple") : buttonLink("p$dev.id", "Select", "green") 
        String durTime = thisDurTime ? buttonLink("q$dev.id", thisDurTime, "purple") : buttonLink("u$dev.id", "Select", "green") 
        
        String sunCheckBoxT = (state.DeVices["$dev.id"].sun) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.8
        String monCheckBoxT = (state.DeVices["$dev.id"].mon) ? buttonLink("c$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("d$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String tueCheckBoxT = (state.DeVices["$dev.id"].tue) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.4
        String wedCheckBoxT = (state.DeVices["$dev.id"].wed) ? buttonLink("g$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("h$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.8
        String thurCheckBoxT = (state.DeVices["$dev.id"].thur) ? buttonLink("i$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("j$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String friCheckBoxT = (state.DeVices["$dev.id"].fri) ? buttonLink("k$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("l$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.4
        String satCheckBoxT = (state.DeVices["$dev.id"].sat) ? buttonLink("m$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("n$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.8
        
        str += "<tr style='color:black'><td>$zone</td>" + 
        "<td>$devLink</td>" +
		"<td title='${thisStartTime ? "Click to Change Start Time" : "Select"}'>$startTime</td>" +
        "<td title='${thisDurTime ? "Click to Change Run Duration" : "Select"}'>$durTime</td>" + 
        "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>" +    
        "<td title='Check Box to select Day'>$sunCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$monCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$tueCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$wedCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$thurCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$friCheckBoxT</td>" +  
        "<td title='Check Box to select Day'>$satCheckBoxT</td>" +
        "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
        "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" +       
        "<td style='border-right:3px solid black' title='Reset Total On Time for $dev' style='padding:0px 0px'>$resetTotal</td></tr>" 
        
        }
   	str += "</table></div>"
    //if (formatBool) {str += "<script type='text/javascript'>\$(document).ready(function() { \$('#main-table').DataTable( {paging: false} ); } );</script>"}  //// ver1.2.0
	str
 }

String buttonLink(String btnName, String linkText, color = "#1A77C9", font = "13px") {
   "<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}


//*****************************************************  Schedules and Subscribes ******************************************************//
void initialize() {
        subscribe(DeVices, "switch.on", onHandler)
	    subscribe(DeVices, "switch.off", offHandler)
    
        
    //if (remoteResetVarBool && resetVar) {
      //  subscribe(location, "variable:${resetVar}.true", remoteReset)
        //setGlobalVar(resetVar, false)
       // }
    //if (remoteResetVarBool && resetVarC) {  //// ver1.1.4
      //  subscribe(location, "variable:${resetVarC}.true", remoteReset)
        //setGlobalVar(resetVarC, false) 
        //}   
       
   // if (autoResetBool) { schedule("2 0 ${resetHour} ? * * *", dailySaveCountsReset) } // Add 2sec after the hour so it doesnt potentially confict with Auto refresh at same time  //// Added ver1.0.1
   
  	//if (autoRefresh == "Minutes") { schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) }   //// ver1.0.3
    //else if (autoRefresh == "Seconds") { schedule("*/${refreshSeconds} * * ? * * *", refreshHandler) }   //// ver1.1.2
    //endif
} 

//**********************************************************  Handlers *************************************************************//
void onHandler(evt) {
    log.info "TEST1 App: ${app.label} -ON Handler, Device ${evt.device.id}.... Now()= ${now()}"
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  
    state.DeVices[evt.device.id].onTime = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}") 
    log.info "TEST2 App: ${app.label} -ON Handler, Device ${evt.device.id}.... Now()= ${now()}"
    //if (resetWhenOnBool) {deviceOnSaveCountsReset()}  
}

void offHandler(evt) {
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].allTime = state.DeVices[evt.device.id].allTime + (now() - state.DeVices[evt.device.id].start) 
    log.info "TEST3 App: ${app.label} -OFF Handler, Device ${evt.device.id}.... state.DeVices[evt.device.id].total= ${state.DeVices[evt.device.id].total}"
	      //String thisVar = state.DeVices[evt.device.id].var
          //String thisVarC = state.DeVices[evt.device.id].varC   //// ver1.1.4
          //String thisVarCT = state.DeVices[evt.device.id].varCT   //// ver1.1.5
    /*
            ////////// Active/On Time Calc   
            int counts = state.DeVices[evt.device.id].counts    //// ver1.1.5   
            int total = state.DeVices[evt.device.id].total /1000    
            int intTime = total  //// ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices[evt.device.id].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
           */    
             //if (thisVar) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               //if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             //}
             //if (thisVarC) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)   //// ver1.1.4 
               //if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             //}
             //if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
}

void appButtonHandler(btn) {
    if (btn == "refresh") refreshHandler()   
    else if (btn.startsWith("a")) state.sunUnCheckedBox = btn.minus("a") 
    else if (btn.startsWith("b")) state.sunCheckedBox = btn.minus("b")
    else if (btn.startsWith("c")) state.monUnCheckedBox = btn.minus("c") 
    else if (btn.startsWith("d")) state.monCheckedBox = btn.minus("d")
    else if (btn.startsWith("e")) state.tueUnCheckedBox = btn.minus("e") 
    else if (btn.startsWith("f")) state.tueCheckedBox = btn.minus("f")
    else if (btn.startsWith("g")) state.wedUnCheckedBox = btn.minus("g") 
    else if (btn.startsWith("h")) state.wedCheckedBox = btn.minus("h")
    else if (btn.startsWith("i")) state.thurUnCheckedBox = btn.minus("i") 
    else if (btn.startsWith("j")) state.thurCheckedBox = btn.minus("j")
    else if (btn.startsWith("k")) state.friUnCheckedBox = btn.minus("k") 
    else if (btn.startsWith("l")) state.friCheckedBox = btn.minus("l")
    else if (btn.startsWith("m")) state.satUnCheckedBox = btn.minus("m") 
    else if (btn.startsWith("n")) state.satCheckedBox = btn.minus("n")
    else if (btn.startsWith("o")) state.newStartTime = btn.minus("o") 
    else if (btn.startsWith("p")) state.remStartTime = btn.minus("p")  
    else if (btn.startsWith("q")) state.newDurTime = btn.minus("q") 
    else if (btn.startsWith("u")) state.remDurTime = btn.minus("u")      
    else if (btn.startsWith("z")) state.resetTotal = btn.minus("z")  
    endif    
    }

//*************************************************** Refresh Functions ********************************************************//
def refreshHandler() {
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        if (dev.currentSwitch == "on") {
        ///////////// Update Times if Active/On
           	state.DeVices[k].total += now() - state.DeVices[k].start
			//state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)
            state.DeVices[k].start = now()
         log.info "TEST4 App: ${app.label} -REFRESH Handler, Device ${k}.... state.DeVices[k].total= ${state.DeVices[k].total}"
            }
    }
        //////////// Update Variables if Active/On  
        DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
          String startTime = state.DeVices["$dev.id"].startTime
          String durtTime = state.DeVices["$dev.id"].durTime  
            
            ////////// Active/On Time Calc   
            int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5
            int total = state.DeVices["$dev.id"].total /1000    
            int intTime = total  //// Added ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
        }
           /*  
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices["$dev.id"].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
            */   
             //if ((thisVar && state.DeVices["$dev.id"].checkBox2) || (thisVar && state.byPassBool)) {  //// ver1.1.3 
               //state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               //if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
            // }
            // if ((thisVarC && state.DeVices["$dev.id"].checkBox2) || (thisVarC && state.byPassBool)) {  //// ver1.1.4 
              // state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)
              // if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
            // }
            // if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
                                                     
         //}
    //state.byPassBool = false  // Reset the bypass  //// ver1.1.3
 }

/*
//////*************************************************** Reset Functions ***************************************************
void dailySaveCountsReset(evt = null) { //// Used by Auto reset daily hour rest to save counts or not  //// ver1.1.4
    if (dayCountsReset) {state.byPassBool = false}
    else state.byPassBool = true  
    resetTimers()
}

void deviceOnSaveCountsReset(evt = null) { //// Device On reset options to prevent counter reset  //// ver1.1.3
    state.byPassBool = true  
    resetTimers()
}
*/
/*
/////////////////// Remote Reset Timers and Variables  
void remoteReset(evt = null) {   //// ver1.1.4 
    state.DeVices.each{k, v ->
		def dev = DeVices.find{"$it.id" == k}
        if (state.DeVices[k].checkBox3) {
            state.DeVices[k].start = now()   
            state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		    state.DeVices[k].total = 0
            if (state.byPassBool == false) {state.DeVices[k].counts = 0  //// ver1.1.3
                  if (capabilitySelect == "4") {state.DeVices[k].min = dev.currentPower; state.DeVices[k].max = dev.currentPower}  //// ver1.2.1
                  else if (capabilitySelect == "5") {state.DeVices[k].min = dev.currentTemperature; state.DeVices[k].max = dev.currentTemperature}   
                  else if (capabilitySelect == "6") {state.DeVices[k].min = dev.currentVoltage; state.DeVices[k].max = dev.currentVoltage}                             
              } 
            //if (resetVarAllBool && resetVar && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0}  
            //if (resetVarC && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0 } 
            }
     }
    if (logEnableBool) {log.debug "App: ${app.label} - Remote Reset Selected Timers to 0 Happening ..........."}
    if(resetVar) setGlobalVar(resetVar, false)
    if(resetVarC) setGlobalVar(resetVarC, false)  
    refreshHandler()     
}
*/
/*
/////////////////// Auto and in App Reset Timers and Variables 
void resetTimers(evt = null) {
    state.DeVices.each{k, v ->
        def dev = DeVices.find{"$it.id" == k}
            state.DeVices[k].start = now()   
            state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		    state.DeVices[k].total = 0
            state.DeVices[k].counts = 0
           // if (state.byPassBool == false) {state.DeVices[k].counts = 0  //// ver1.1.3
             //     if (capabilitySelect == "4") {state.DeVices[k].min = dev.currentPower; state.DeVices[k].max = dev.currentPower}  //// ver1.2.1
               //   else if (capabilitySelect == "5") {state.DeVices[k].min = dev.currentTemperature; state.DeVices[k].max = dev.currentTemperature}   
               //   else if (capabilitySelect == "6") {state.DeVices[k].min = dev.currentVoltage; state.DeVices[k].max = dev.currentVoltage}                             
              //}
                                        
        }
    if (logEnableBool) {log.debug "App: ${app.label} - App Periodic Active/On All Timers Reset to 0 Happening ..........."}
    refreshHandler() //// ver1.0.3
}
*/
//****************************************************** Other Stuff ********************************************************//
def updated() {
    unsubscribe()
    unschedule()
    initialize()
    if(logEnableBool) runIn(3600, logsOff)  // Disable all Logging after time elapsed
}
def installed() {
}
def logsOff() {
    log.info "${app.label} - Debug logging auto disabled"
    app?.updateSetting("logEnableBool",[value:"false",type:"bool"])
}
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:#0000ff;font-weight: bold'>${myText}</h3>"
    if (formatBool) {
        if(type == "header") {return "<div style='color:#660000;font-weight: bold'>${myText}</div>"}  //// ver1.2.0
        if(type == "important2") return "<div style='color:#5a8200'>${myText}</div>"
    }
    else {
        if(type == "header") return "<div style='color:#000000;font-weight: bold'>${myText}</div>"
        if(type == "important2") return "<div style='color:#000000'>${myText}</div>"
    }
    //if(type == "red") return "<div style='color:#660000'>${myText}</div>"
	if(type == "importantBold") return "<div style='color:#32a4be;font-weight: bold'>${myText}</div>"
	if(type == "important") return "<div style='color:#32a4be'>${myText}</div>"
	//if(type == "important2Bold") return "<div style='color:#5a8200;font-weight: bold'>${myText}</div>"
	if(type == "lessImportant") return "<div style='color:green'>${myText}</div>"
}
def displayTitle() {
    setVersion()
    theName = app.label
    if(theName == null || theName == "") theName = "New Child App"
	section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}
