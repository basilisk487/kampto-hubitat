/* Time Active Tracker (Child)
*  
*	2022 T. K. (kampto)
*	NOTES:  Track the time a device is Active/On. Assign to a variable if needed. Refresh/Reset/Update variable various ways. Use variable in RM to trigger things. Other Apps/Drivers @ https://github.com/kampto/Hubitat/
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.1.3	2023-04-27	kampto		Add total time in table. Table Check Boxes. Option to disable App based logging. Added Seconds Update. Added On counts.
*   1.1.0	2023-04-15	kampto		Updated page format, option for variables as an int for use in RM. Option to reset when active. Enhanced logs. Power reset bug fix.
*   1.0.3	2023-04-12	kampto		Added Time/Variable refresh time entry, fixed variable refresh at reset, Bug fixes 
*   1.0.2	2023-04-07	kampto		Added Power monitoring capability  
*   1.0.1	2022-10-10	kampto		Added Auto Reset timers, added state to table.  
*   1.0.0	2022-10-02	kampto		Modified to support Parent/Child apps. Add other capabilities and features. Origin from Bruce Ravenel - Hubitat
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Device Time Active Tracker Child"
	state.version = "1.1.3"
    }

definition (
	name: "Device Time Active Tracker Child", namespace: "kampto", author: "T. Kamp",
	description: "Track Time a device is active. Attach to a variable",
	category: "Convenience",
	parent: "kampto:Device Time Active Tracker",
	iconUrl: "",
	iconX2Url: "",
	)

preferences {page(name: "mainPage")}

//****************************************************  Page/Input Set-Up  ******************************************************//
def mainPage() {
    if (state.lights == null) state.lights = [:]
    if (state.lightsList == null) state.lightsList = []
    if (resetHour == null) {resetHour = 0}
    if (refreshMinutes == null) {refreshMinutes = 10}
    if (refreshSeconds == null) {refreshSeconds = 30}
    if (powerThreshold == null) {powerThreshold = 1} 
    if (capabilitySelect == null) {capabilitySelect = 1}
    if (allTotal == null) {allTotal = 0}   //// Added ver 1.1.3
        
  dynamicPage(name: "", title: "", install: true, uninstall: true) {
  displayTitle() 
  section {
        label title: "<b>1. Enter a name for this child App</b>", required: true, submitOnChange: true, width: 4
        input name: "capabilitySelect", type: "enum", title: "<b>2. Select a capability you want to track.</b>", required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"], ["2":"CONTACT Open"], ["3":"CONTACT Closed"], ["4":"POWER Monitor"]], width: 6, submitOnChange: true, displayDuringSetup: false
        if (capabilitySelect == "1") {input "lights", "capability.switch", title: "<b>3. Select Switch Devices to Track Switch On Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "2") {input "lights", "capability.contactSensor", title: "<b>3. Select Contact Devices to Track Contact Open Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "3") {input "lights", "capability.contactSensor", title: "<b>3. Select Contact Devices to Track Contact Closed Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "4") {input "lights", "capability.powerMeter", title: "<b>3. Select Power Meter Devices to Track On Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else {input "lights", "capability.switch", title: "<b>3. Select Switch Devices to Track Switch On Time</b>", multiple: true, submitOnChange: true, width: 6}
        
    lights.each {dev ->
	    if(!state.lights["$dev.id"]) {
             if (capabilitySelect == "1") {state.lights["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, var: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true]}  
             else if (capabilitySelect == "2") {state.lights["$dev.id"] = [start: dev.currentContact == "open" ? now() : 0, total: 0, var: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true]}
             else if (capabilitySelect == "3") {state.lights["$dev.id"] = [start: dev.currentContact == "closed" ? now() : 0, total: 0, var: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true]}
             else if (capabilitySelect == "4") {state.lights["$dev.id"] = [start: dev.currentPower >= powerThreshold ? now() : 0, total: 0, var: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true]}
             endif
	         state.lightsList += dev.id   
             }
	    }
                           
     if(lights) {
           	if(lights.id.sort() != state.lightsList.sort()) { 
				state.lightsList = lights.id
				Map newState = [:]
				lights.each{d ->  newState["$d.id"] = state.lights["$d.id"]}
				state.lights = newState
				}
                
             updated()
			 paragraph displayTable()
			    if(state.newVar) {
					List vars = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                    input "newVar", "enum", title: "(Optional) Select Hub Variable to recieve Active timer results. Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format to use in Rule Machine. Variables can also be viewed in a dashboard tile. Set table 'Variable Type' table checkbox to match the variable type. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 9, options: vars, newLineAfter: true
					                     
                  if(newVar) {
					  state.lights[state.newVar].var = newVar
                      state.remove("newVar")
					  app.removeSetting("newVar")
					  paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
                else if(state.remVar) {
					state.lights[state.remVar].var = ""
                    state.remove("remVar")
					paragraph "<script>{changeSubmit(this)}</script>"
				    }
         
               input "reset", "button", title: "RESET Active Times & Update Variables", width: 4
               input "refresh", "button", title: "REFRESH All Table & Update Variables", width: 4
			}
  }
        
      section {
          if (capabilitySelect == "4") {
             input name: "powerThreshold", type: "number", title:"<b>Enter minimum Power(w) to start tracking (Default = 1), &nbsp <small>Applys to All</small>", defaultValue: "1", required: false,  style: 'margin-left:10px'
              }
          input name: "autoRefresh", type: "enum", title: "<b>Auto Update Variables every XX Minuites or Seconds after the hour?  &nbsp <small>Applys to Auto Update Checked Box(s) in Table</small></b>", defaultValue:"Minutes", submitOnChange:true, options: ["Don't Update", "Minutes","Seconds"], required: false, style: 'margin-left:10px'
               if (autoRefresh == "Seconds") {input name: "refreshSeconds", type: "enum", title: "<b>>> Select Variables Update interval in Seconds for On/Active devices only. </b> &nbsp &nbsp <small>Default = 30sec &nbsp &nbsp Example:7:00:00, 7:00:30, 7:01:00,... NOTE: Faster updates will increase hub load. </small>", defaultValue: "30", submitOnChange: true,  options: ["5","10","15","20","30"], required: false, style: 'margin-left:70px'
                 }
               else if (autoRefresh == "Minutes") {input name: "refreshMinutes", type: "enum", title: "<b>>> Select Variables Update interval in Minutes for On/Active devices only. </b> &nbsp &nbsp <small>Default = 10min &nbsp &nbsp Example:7:00, 7:10, 7:20,...</small>", defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, style: 'margin-left:70px'
                 }
               endif
          input name: "autoResetBool", type: "bool", title: "<b>Daily Reset all Timers & Update Variables at a specific Hour? (Does not Reset in app Cumulative Timer)  &nbsp <small>Applys to All</small></b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (autoResetBool) {
             input name: "resetHour", type: "enum", title: "<b>>> Select an Hour for Auto Reset Everyday, 0 to 23. </b> &nbsp &nbsp <small>Default = 0 (Midnight)</small>", defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, style: 'margin-left:70px'
             }
          input name: "resetWhenOnBool", type: "bool", title: "<b>Reset all Timers & Update Variables when any Device becomes On/Active? (Does not Reset in app Cumulative Timer) &nbsp <small>Applys to All</small></b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          input name: "resetVarBool", type: "bool", title: "<b>Select Hub Variable to Reset all Timers from outside of App, For Rule Machine access.</b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (resetVarBool) {
            input "resetVar", "enum", title: "<small>(Optional) Select Boolean Hub Variable to Reset all Timers, Must make a Boolean variable first in Settings/Hub Variables. In Rule Machine set variable to 'true' to trigger reset. </small>", submitOnChange: true, style: 'margin-left:10px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
               }
          input name: "logEnableBool", type: "bool", title: "<b>Enable Logging of App based Resets and Variable Refresh/Updates? &nbsp <small>Applys to All</small></b>", defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
      }
 }
}
//****************************************************  App Page TABLE  ******************************************************//
String displayTable() {
    if(state.reset) {
		def dev = lights.find{"$it.id" == state.reset}
        state.lights[state.reset].start = now()
        state.lights[state.reset].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.lights[state.reset].total = 0
        state.lights[state.reset].counts = 0   //// Added ver 1.1.3
      	state.remove("reset")
	}
    
    if(state.resetTotal) {       //// Added ver 1.1.3       
		def dev = lights.find{"$it.id" == state.resetTotal}
        state.lights[state.resetTotal].allTime = 0
        state.remove("resetTotal")
	}
    ////////////// Variable String or Integer Check Box
    if(state.checkedBox1) {       //// Added ver 1.1.3
      def dev = lights.find{"$it.id" == state.checkedBox1}  
	  state.lights[state.checkedBox1].checkBox1 = true
      state.remove("checkedBox1")
	  }
	else if(state.uncheckedBox1) {
      def dev = lights.find{"$it.id" == state.uncheckedBox1}  
	  state.lights[state.uncheckedBox1].checkBox1 = false
      state.remove("uncheckedBox1")
	  }
    endif
    ////////////// Variable Auto Refresh Check Box
    if(state.checkedBox2) {      //// Added ver 1.1.3
      def dev = lights.find{"$it.id" == state.checkedBox2}  
	  state.lights[state.checkedBox2].checkBox2 = true
      state.remove("checkedBox2")
	  }
	else if(state.uncheckedBox2) {
      def dev = lights.find{"$it.id" == state.uncheckedBox2}  
	  state.lights[state.uncheckedBox2].checkBox2 = false
      state.remove("uncheckedBox2")
	  }
    endif
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"
	str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {padding:3px 4px;text-align:center;font-size:12px} .tstat-col td {font-size:15px }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:2.5px solid black'>" +
		"<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>Device</th>" +
		"<th>Active or <br>On Time</th>" +
        "<th>State</th>" +
        "<th>On<br>Counts</th>" +
        "<th>Reset</th>" +
		"<th>Last<br>Reset</th>" +
		"<th>Linked<br>Variable</th>"+
        "<th>Variable Type?<br>Number xxxx sec <br>or String xx:xx:xx</th>"+    //// Added ver 1.1.3
        "<th>Apply<br>Variable<br>Auto Update?</th>"+     //// Added ver 1.1.3
        "<th>Cumulative<br>Total Time</th>"+    //// Added ver 1.1.3
        "<th>Reset<br>Total</th></tr></thead>"   //// Added ver1.1.0
	   
    lights.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisVar = state.lights["$dev.id"].var
         
        ////////// Active/On Time Calc   
        int total = state.lights["$dev.id"].total / 1000    
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
	    total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
        ////////// Total All Cumalative Time Calc   //// Added ver 1.1.3
        int allTotal = state.lights["$dev.id"].allTime /1000      
        int allHours = allTotal / 3600  
	    allTotal = allTotal % 3600
	    int allMins = allTotal / 60
	    int allSecs = allTotal % 60    
        String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
        
        if (thisVar) {state.lights["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)}  //// Update Variable
        if (logEnableBool) {log.info "App: ${app.label} - Page Refresh or Reset, Device ${"$dev.id"} now Inactive/Off, Variable *${thisVar}* to ${time} or ${intTime}sec"}   //// Added ver 1.1.3
                       
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String reset = buttonLink("d$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")
        String resetTotal = buttonLink("t$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")  //// Added ver 1.1.3
        String var = thisVar ? buttonLink("r$dev.id", thisVar, "purple") : buttonLink("n$dev.id", "Select", "green")
        
        String checkedBox1T = (state.lights["$dev.id"].checkBox1) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// Added ver 1.1.3
        String checkedBox2T = (state.lights["$dev.id"].checkBox2) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// Added ver 1.1.3
                   
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>" 
		if (capabilitySelect == "1") { str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>"}
        else if (capabilitySelect == "2") {str += "<td style='font-weight:bold; color:${dev.currentContact == "open" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentContact == "open" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>" }
        else if (capabilitySelect == "3") {str += "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.dev.currentContact == "closed" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>"} 
        else if (capabilitySelect == "4") {str += "<td style='font-weight:bold; color:${dev.currentPower >= powerThreshold ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentPower >= powerThreshold ? "green" : "red"}'title='State $dev'>$dev.currentPower</td>"} 
        endif 
                   
        str += "<td title='On Counts' >${state.lights["$dev.id"].counts}</td>" +
        "<td title='Reset for $dev' style='padding:0px 0px'>$reset</td>" +
		"<td title='Time of last Reset for $dev'>${state.lights["$dev.id"].time ?: ""} </td>" +  
        "<td title='${thisVar ? "Deselect $thisVar" : "Select String Hub Variable"}'>$var</td>" + 
        "<td title='Check Box to update variable in total seconds time Integer, otherwise String time format variable'>$checkedBox1T</td>" +     //// Added ver 1.1.3
        "<td style='border-right:2px solid black' title='Check Box to Apply Auto Variable refresh Update interval from below'>$checkedBox2T</td>" +   //// Added ver 1.1.3  
        "<td title='Total Cumulative Time on'>$allTime</td>" +   //// Added ver1.1.3  
        "<td title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td></tr>"  //// Added ver1.1.0  
     }
   	str += "</table></div>"
	str
}

String buttonLink(String btnName, String linkText, color = "#1A77C9", font = "15px") {
	"<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}

//***************************************************  Schedules and Subscribes ******************************************************//
void initialize() {
    if (capabilitySelect == "1") {
	subscribe(lights, "switch.on", onHandler)
	subscribe(lights, "switch.off", offHandler)
    }
    else if (capabilitySelect == "2") {
	subscribe(lights, "contact.open", onHandler)
    subscribe(lights, "contact.closed", offHandler)
    }
    else if (capabilitySelect == "3") {
	subscribe(lights, "contact.open", offHandler)
	subscribe(lights, "contact.closed", onHandler)
    }
    else if (capabilitySelect == "4") { //// Added ver 1.0.2
	subscribe(lights, "power.< powerThreshold", offHandler)
	subscribe(lights, "power.>= powerThreshold", onHandler)
    }
    endif
    
    if (autoResetBool) { //// Added ver 1.0.1
        schedule("2 0 ${resetHour} ? * * *", byPassResetTimers) // Add 2sec after the hour so it doesnt potentially confict with Auto refresh at same time
        }
    if(resetVar) {
		subscribe(location, "variable:${resetVar}.true", resetTimers)
		setGlobalVar(resetVar, false)
	    }
        if (autoRefresh == "Minutes") { //// Added ver 1.0.3
            schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) 
            }
        else if (autoRefresh == "Seconds") { //// Added ver 1.1.2
            schedule("*/${refreshSeconds} * * ? * * *", refreshHandler) 
            }
        endif
}

//******************************************************  Handlers / Functions ************************************************************//
void appButtonHandler(btn) {
	if (btn == "reset") resetTimers() //// Added ver 1.0.1
    else if (btn == "refresh") refreshHandler()  //// Added ver 1.0.3
    else if (btn.startsWith("n")) state.newVar = btn.minus("n")
	else if (btn.startsWith("r")) state.remVar = btn.minus("r")
    else if (btn.startsWith("t")) state.resetTotal = btn.minus("t")  //// Added ver 1.1.3 
    else if (btn.startsWith("a")) state.uncheckedBox1 = btn.minus("a")  //// Added ver 1.1.3   
    else if (btn.startsWith("b")) state.checkedBox1 = btn.minus("b")  //// Added ver 1.1.3 
    else if (btn.startsWith("e")) state.uncheckedBox2 = btn.minus("e")  //// Added ver 1.1.3  
    else if (btn.startsWith("f")) state.checkedBox2 = btn.minus("f")  //// Added ver 1.1.3       
    else state.reset = btn.minus("d")
    }

def refreshHandler() {   //// Added ver 1.0.3
    state.lights.each {k, v ->
        def dev = lights.find{"$it.id" == k}
        ///////////// Update Times if Active/On
        if (capabilitySelect == "1" && dev.currentSwitch == "on") {
           	state.lights[k].total += now() - state.lights[k].start
			state.lights[k].allTime = state.lights[k].allTime + (now() - state.lights[k].start) //// Added ver 1.1.3
            state.lights[k].start = now()
            }
        else if (capabilitySelect == "2" && dev.currentContact == "open") {
        	state.lights[k].total += now() - state.lights[k].start
            state.lights[k].allTime = state.lights[k].allTime + (now() - state.lights[k].start)  //// Added ver 1.1.3
			state.lights[k].start = now()
            }
        else if (capabilitySelect == "3" && dev.currentContact == "closed") {
        	state.lights[k].total += now() - state.lights[k].start
            state.lights[k].allTime = state.lights[k].allTime + (now() - state.lights[k].start)  //// Added ver 1.1.3
			state.lights[k].start = now()
		    }
        else if (capabilitySelect == "4" && dev.currentPower >= powerThreshold) { //// Added ver 1.0.2
        	state.lights[k].total += now() - state.lights[k].start
            state.lights[k].allTime = state.lights[k].allTime + (now() - state.lights[k].start)  //// Added ver 1.1.3
			state.lights[k].start = now()
		    } 
        endif
      }
        //////////// Update Variables if Active/On  
        lights.sort{it.displayName.toLowerCase()}.each {dev ->
        int total = state.lights["$dev.id"].total / 1000
        String thisVar = state.lights["$dev.id"].var
          if ((thisVar && state.lights["$dev.id"].checkBox2) || (thisVar && byPassBool)) {  //// Added ver 1.1.3
            int intTime = total  //// Added ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
                state.lights["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)
                if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Variable *${thisVar}* to ${time} or ${intTime}sec"}                                        
           }
       }
    byPassBool = false  // Reset the bypass  //// Added ver 1.1.3
}
 
void onHandler(evt) {
	state.lights[evt.device.id].start = now()
    state.lights[evt.device.id].counts += 1  //// Added ver 1.1.3
    if (resetWhenOnBool) {byPassResetTimers()} //// Added ver 1.1.0
}

void offHandler(evt) {
    state.lights[evt.device.id].total += now() - state.lights[evt.device.id].start
    state.lights[evt.device.id].allTime = state.lights[evt.device.id].allTime + (now() - state.lights[evt.device.id].start) //// Added ver 1.1.3
	String thisVar = state.lights[evt.device.id].var
	if(thisVar) {
        int total = state.lights[evt.device.id].total / 1000
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
	    total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            state.lights[evt.device.id].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)
            if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Variable *${thisVar}* to ${time} or ${intTime}sec"}
        }
    }

void byPassResetTimers(evt = null) {  //// To set a bypass around Auto Refresh being unchecked  //// Added ver 1.1.3
    byPassBool = true
    resetTimers()
}
void resetTimers(evt = null) {
    if (logEnableBool) {log.debug "App: ${app.label} - All Active/On Timers Reset to 0 Happening ..........."}
	state.lights.each{k, v ->
		def dev = lights.find{"$it.id" == k}
        state.lights[k].start = now()   
        state.lights[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.lights[k].total = 0
        state.lights[k].counts = 0  //////
    }
	if(resetVar) setGlobalVar(resetVar, false)
    refreshHandler() //// Added ver 1.0.3
}
//************************************************* Other Stuff ********************************************************//
def updated() {
    unsubscribe()
    unschedule()
    initialize()
}
def installed() {
}
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:#0000ff;font-weight: bold'>${myText}</h3>"
}
def displayTitle() {
    setVersion()
    theName = app.label
    if(theName == null || theName == "") theName = "New Child App"
	section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}
