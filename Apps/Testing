/* Time Active Tracker (Child)
*  
*	2022 T. Kamp (kampto)
*	NOTES:  Track the time a device is Active. Assign to a variable. Other Apps/Drivers @ https://github.com/kampto/Hubitat/
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.1.0	2023-04-15	kampto		Updated page format, option for variables as an int for use in RM. Option to reset when active. Enhanced logs. Power reset bug fix.
*   1.0.3	2023-04-12	kampto		Added Time/Variable refresh time entry, fixed variable refresh at reset, Bug fixes 
*   1.0.2	2023-04-07	kampto		Added Power monitoring capability  
*   1.0.1	2022-10-10	kampto		Added Auto Reset timers, added state to table.  
*   1.0.0	2022-10-02	kampto		Modified to support Parent/Child apps. Add other capabilities and features. Origin from Bruce Ravenel - Hubitat
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Device Time Active Tracker Child"
	state.version = "1.1.0"
}

definition(
	name: "Device Time Active Tracker Child", namespace: "kampto", author: "T. Kamp",
	description: "Track Time a device is active. Attach to a variable",
	category: "Convenience",
	parent: "kampto:Device Time Active Tracker",
	iconUrl: "",
	iconX2Url: "",
	)

preferences {
    page(name: "mainPage")
}

//****************************************************  Page/Input Set-Up  ******************************************************//
def mainPage() {
	if (state.lights == null) state.lights = [:]
	if (state.lightsList == null) state.lightsList = []
    if (resetHour == null) {resetHour = 0}
    if (refreshMinutes == null) {refreshMinutes = 10}
    if (powerThreshold == null) {powerThreshold = 1} 
    if (capabilitySelect == null) {capabilitySelect = 1}

    dynamicPage(name: "", title: "", install: true, uninstall: true) {
    displayTitle() 
    section {
       label title: "<b>1. Enter a name for this child App</b>", required: true, submitOnChange: true, width: 4
       input name: "capabilitySelect", type: "enum", title: "<b>2. Select a capability you want to track.</b>", required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"], ["2":"CONTACT Open"], ["3":"CONTACT Closed"], ["4":"POWER Monitor"]], width: 6, submitOnChange: true, displayDuringSetup: false
       if (capabilitySelect == "1") {input "lights", "capability.switch", title: "<b>3. Select Switch Devices to Track Switch On Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "2") {input "lights", "capability.contactSensor", title: "<b>3. Select Contact Devices to Track Contact Open Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "3") {input "lights", "capability.contactSensor", title: "<b>3. Select Contact Devices to Track Contact Closed Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else if (capabilitySelect == "4") {input "lights", "capability.powerMeter", title: "<b>3. Select Power Meter Devices to Track On Time</b>", required: true, multiple: true, submitOnChange: true, width: 6}
        else {input "lights", "capability.switch", title: "<b>3. Select Switch Devices to Track Switch On Time</b>", multiple: true, submitOnChange: true, width: 6}
        
          lights.each {dev ->
			    if(!state.lights["$dev.id"]) {
                    if (capabilitySelect == "1") {state.lights["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, var: "", time: ""]}
                    else if (capabilitySelect == "2") {state.lights["$dev.id"] = [start: dev.currentContact == "open" ? now() : 0, total: 0, var: "", time: ""]}
                    else if (capabilitySelect == "3") {state.lights["$dev.id"] = [start: dev.currentContact == "closed" ? now() : 0, total: 0, var: "", time: ""]}
                    else if (capabilitySelect == "4") {state.lights["$dev.id"] = [start: dev.currentPower >= powerThreshold ? now() : 0, total: 0, var: "", time: ""]}
                    endif
				    state.lightsList += dev.id   
                    }
			    }
                           
            if(lights) {
            	if(lights.id.sort() != state.lightsList.sort()) { 
					state.lightsList = lights.id
					Map newState = [:]
					lights.each{d ->  newState["$d.id"] = state.lights["$d.id"]}
					state.lights = newState
				}
                
                updated()
				paragraph displayTable()
				if(state.newVar) {
					input name: "inSecondsBool", type: "bool", title: "<b>Store Variable as DataType Integer(Number) in Total Seconds? &nbsp <small> Applys to All</b> &nbsp &nbsp Default = No (String Time format)</small>", defaultValue:false, submitOnChange:true, style:'margin-left:10px'
                    List vars = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                    input "newVar", "enum", title: "(Optional) Select Hub Variable to link timer results. First Make a variable in Settings/Hub Variables, String variable for Time Format or a Number variable for Integer total seconds format. Must select a variable that matches DataType you want, String or Number. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 8, options: vars, newLineAfter: true
					                    
                    if(newVar) {
						state.lights[state.newVar].var = newVar
                        state.remove("newVar")
						app.removeSetting("newVar")
						paragraph "<script>{changeSubmit(this)}</script>"
					}
				} 
                else if(state.remVar) {
					state.lights[state.remVar].var = ""
                    state.remove("remVar")
					paragraph "<script>{changeSubmit(this)}</script>"
				}
				input "reset", "button", title: "Reset All Table & Variables", width: 3
			}
            input "refresh", "button", title: "Refresh All Table & Update Variables", width: 3
       }
        
      section {
          if (capabilitySelect == "4") {
             input name: "powerThreshold", type: "number", title:"<b>Enter minimum Power(w) to start tracking (Default = 1), &nbsp <small>Applys to All</small>", defaultValue: "1", required: false,  style: 'margin-left:10px'
           }
          input name: "autoRefreshBool", type: "bool", title: "<b>Auto Update Variables every X Minuites after the hour?  &nbsp <small>Applys to All</small></b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
           if (autoRefreshBool) {
             input name: "refreshMinutes", type: "enum", title: "<b>Select Update interval in Minutes. </b> &nbsp &nbsp <small>Default = 10 &nbsp &nbsp Example:7:00, 7:10, 7:20,...</small>", defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, style: 'margin-left:10px'
             }
          input name: "autoResetBool", type: "bool", title: "<b>Daily Reset all Timers & Update Variables at a specific Hour?  &nbsp <small>Applys to All</small></b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
           if (autoResetBool) {
             input name: "resetHour", type: "enum", title: "<b>Select an Hour for Auto Reset Everyday, 0 to 23. </b> &nbsp &nbsp <small>Default = 0 (Midnight)</small>", defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, style: 'margin-left:10px'
             }
          input name: "resetWhenOnBool", type: "bool", title: "<b>Reset all Timers & Update Variables when any Device becomes Active?  &nbsp <small>Applys to All</small></b>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          input name: "resetVarBool", type: "bool", title: "Select Boolean Hub Variable to Reset all Timers, For Rule Machine access", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
           if (resetVarBool) {
            input "resetVar", "enum", title: "<small>(Optional) Select Boolean Hub Variable to Reset all Timers, Must make a Boolean variable first in Settings/Hub Variables. In Rule Machine set variable to 'true' to trigger reset. </small>", submitOnChange: true, style: 'margin-left:10px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
            }
	}
 }
}
//****************************************************  App Page TABLE  ******************************************************//
String displayTable() {
  	if(state.reset) {
		def dev = lights.find{"$it.id" == state.reset}
        if (capabilitySelect == "1") {state.lights[state.reset].start = dev.currentSwitch == "on" ? now() : 0}
        else if (capabilitySelect == "2") {state.lights[state.reset].start = dev.currentContact == "open" ? now() : 0}
        else if (capabilitySelect == "3") {state.lights[state.reset].start = dev.currentContact == "closed" ? now() : 0}
        else if (capabilitySelect == "4") {state.lights[state.reset].start = dev.currentPower >= powerThreshold ? now() : 0}
        endif
		state.lights[state.reset].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.lights[state.reset].total = 0
      	state.remove("reset")
	}
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"
	str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td,.tstat-col th { padding:8px 8px;text-align:center;font-size:12px} .tstat-col td {font-size:15px }" +
		"</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:2px solid black'>" +
		"<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>Device</th>" +
		"<th>Total Active Time</th>" +
        "<th>State</th>" +  
        "<th>Reset</th>" +
		"<th>Last Reset</th>" +
		"<th>Linked Variable</th>"+
        "<th>Var DataType</th></tr></thead>"  //// Added ver1.1.0
	   
        lights.sort{it.displayName.toLowerCase()}.each {dev ->
        int total = state.lights["$dev.id"].total / 1000
		String thisVar = state.lights["$dev.id"].var
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
	    total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
                                    
        if (inSecondsBool) {if(thisVar) setGlobalVar(thisVar, intTime) //// Added ver1.1.0
            //log.info "App: ${app.label} - App Table Device ID ${dev.id} Variable *${thisVar}* to ${intTime}sec"
            } 
        else {if(thisVar) setGlobalVar(thisVar, time)
            //log.info "App: ${app.label} - App Table Device ID ${dev.id} Variable *${thisVar}* to ${time} string Format"
            }
               
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String reset = buttonLink("d$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "20px")
		String var = thisVar ? buttonLink("r$dev.id", thisVar, "purple") : buttonLink("n$dev.id", "Select", "green")
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>" 
			
           if (capabilitySelect == "1") { str += "<td style='color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" + "<td title='State $dev'>$dev.currentSwitch</td>"}
           else if (capabilitySelect == "2") {str += "<td style='color:${dev.currentContact == "open" ? "green" : "red"}'>$time</td>" + "<td title='State $dev'>$dev.currentContact</td>" }
           else if (capabilitySelect == "3") {str += "<td style='color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" + "<td title='State $dev'>$dev.currentContact</td>"} 
           else if (capabilitySelect == "4") {str += "<td style='color:${dev.currentPower >= powerThreshold ? "green" : "red"}'>$time</td>" + "<td title='State $dev'>$dev.currentPower</td>"} 
           endif 
            
        String varType //// Added ver1.1.0
        if (inSecondsBool) {varType = "Number"}
        else {varType = "String"}
            
        str += "<td title='Reset Total for $dev' style='padding:0px 0px'>$reset</td>" +
		"<td title='Time of last Reset for $dev'>${state.lights["$dev.id"].time ?: ""}</td>" +
        "<td title='${thisVar ? "Deselect $thisVar" : "Select String Hub Variable"}'>$var</td>"+
        "<td title='This DataType must match DataType of Variable'>${varType}</td></tr>"  //// Added ver1.1.0  
            
      }
        
	str += "</table></div>"
	str
}

String buttonLink(String btnName, String linkText, color = "#1A77C9", font = "15px") {
	"<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}

//***************************************************  Schedules and Subscribes ******************************************************//
void initialize() {
    if (capabilitySelect == "1") {
	subscribe(lights, "switch.on", onHandler)
	subscribe(lights, "switch.off", offHandler)
    }
    else if (capabilitySelect == "2") {
	subscribe(lights, "contact.open", onHandler)
    subscribe(lights, "contact.closed", offHandler)
    }
    else if (capabilitySelect == "3") {
	subscribe(lights, "contact.open", offHandler)
	subscribe(lights, "contact.closed", onHandler)
    }
    else if (capabilitySelect == "4") { //// Added ver 1.0.2
	subscribe(lights, "power.< powerThreshold", offHandler)
	subscribe(lights, "power.>= powerThreshold", onHandler)
    }
    endif
    
    if (autoResetBool) { //// Added ver 1.0.1
        schedule("0 0 ${resetHour} ? * * *", resetTimers) //CRON  "<second> <minute> <hour> <day-of-month> <month> <day-of-week> <Year optional>", <command>
        }
    if (autoRefreshBool) { 
        schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) //// Added ver 1.0.3
        }
    if(resetVar) {
		subscribe(location, "variable:${resetVar}.true", resetTimers)
		setGlobalVar(resetVar, false)
	    }
}

//******************************************************  Handlers / Functions ************************************************************//
void appButtonHandler(btn) {
	if (btn == "reset") resetTimers() //// Added ver 1.0.1
    else if (btn == "refresh") refreshHandler()  //// Added ver 1.0.3
    else if (btn.startsWith("n")) state.newVar = btn.minus("n")
	else if (btn.startsWith("r")) state.remVar = btn.minus("r")
	else state.reset = btn.minus("d")
    }

def refreshHandler() {   //// Added ver 1.0.3
    state.lights.each {k, v ->
		def dev = lights.find{"$it.id" == k}
        if (capabilitySelect == "1" && dev.currentSwitch == "on") {
        	state.lights[k].total += now() - state.lights[k].start
			state.lights[k].start = now()
		    }
        else if (capabilitySelect == "2" && dev.currentContact == "open") {
        	state.lights[k].total += now() - state.lights[k].start
			state.lights[k].start = now()
            }
        else if (capabilitySelect == "3" && dev.currentContact == "closed") {
        	state.lights[k].total += now() - state.lights[k].start
			state.lights[k].start = now()
		    }
        else if (capabilitySelect == "4" && dev.currentPower >= powerThreshold) { //// Added ver 1.0.2
        	state.lights[k].total += now() - state.lights[k].start
			state.lights[k].start = now()
		    } 
        endif
        }
    
    lights.sort{it.displayName.toLowerCase()}.each {dev ->
    int total = state.lights["$dev.id"].total / 1000
    String thisVar = state.lights["$dev.id"].var    
    int intTime = total  //// Added ver1.1.0
    int hours = total / 3600
	total = total % 3600
	int mins = total / 60
	int secs = total % 60
	String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
                                    
    if (inSecondsBool) {if(thisVar) setGlobalVar(thisVar, intTime) //// Added ver1.1.0
        log.info "App: ${app.label} - Device ID ${dev.id} Variable *${thisVar}* to ${intTime}sec"
        } 
    else {if(thisVar) setGlobalVar(thisVar, time)
        log.info "App: ${app.label} - Device ID ${dev.id} Variable *${thisVar}* to ${time} string Format"
        }     
     }
   }
  
void onHandler(evt) {
	state.lights[evt.device.id].start = now()
    if (resetWhenOnBool) {resetTimers()} //// Added ver 1.1.0
}

void offHandler(evt) {
    state.lights[evt.device.id].total += now() - state.lights[evt.device.id].start
	String thisVar = state.lights[evt.device.id].var
	if(thisVar) {
        int total = state.lights[evt.device.id].total / 1000
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
	    total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
                                    
        if (inSecondsBool) {setGlobalVar(thisVar, intTime) //// Added ver1.1.0
            log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Variable *${thisVar}* to ${intTime}sec"
            } 
        else {setGlobalVar(thisVar, time)
            log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Variable *${thisVar}* to ${time} string Format"
            }     
        }
    }

void resetTimers(evt = null) {
    log.debug "App: ${app.label} - All Timers Reset to 0 Happening ..........."
	state.lights.each{k, v ->
		def dev = lights.find{"$it.id" == k}
        if (capabilitySelect == "1") {state.lights[k].start = dev.currentSwitch == "on" ? now() : 0}
        else if (capabilitySelect == "2") {state.lights[k].start = dev.currentContact == "open" ? now() : 0}
        else if (capabilitySelect == "3") {state.lights[k].start = dev.currentContact == "closed" ? now() : 0}
        else if (capabilitySelect == "4") {state.lights[k].start = dev.currentPower >= powerThreshold ? now() : 0} //// Added ver 1.0.2
        endif
		state.lights[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.lights[k].total = 0
    }
	if(resetVar) setGlobalVar(resetVar, false)
    refreshHandler() //// Added ver 1.0.3
}
//************************************************* Other Stuff ********************************************************//
def updated() {
	unsubscribe()
	unschedule()
    initialize()
}

def installed() {
}

def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:#0000ff;font-weight: bold'>${myText}</h3>"
}

def displayTitle() {
    setVersion()
    theName = app.label
    if(theName == null || theName == "") theName = "New Child App"
	section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}
