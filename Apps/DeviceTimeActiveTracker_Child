/* Device Active Time and Counter Tracker (Child App)
*  
*	2022 T. K. (kampto)
*	NOTES:  Track the time and counts a device is Active/On. Assign to a variable if needed. Refresh/Reset/Update variable various ways. Use variable in RM to trigger things. 
*   
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*   Ver		Date:		Who:		What:
*   1.1.7	2023-05-02	kampto		Added Temperature capability. Added temp and power below threshold tracking
*   1.1.6	2023-05-01	kampto		Added 'Days' option for table display-only. Fixed remote reset bug and powerHandler bug
*   1.1.5	2023-04-28	kampto		Added 2nd variable per device to reset cumulative time. More variable and reset options. Added On Counts variable and reset
*   1.1.3	2023-04-27	kampto		Add total time in table. Table Check Boxes. Option to disable App based logging. Added Seconds Update. Added On counts.
*   1.1.0	2023-04-15	kampto		Updated page format, option for variables as an int for use in RM. Option to reset when active. Enhanced logs. Power reset bug fix.
*   1.0.3	2023-04-12	kampto		Added Power monitoring capability, Added Time/Variable refresh time entry, fixed variable refresh at reset, Bug fixes 
*   1.0.1	2022-10-10	kampto		Added Auto Reset timers, added state to table.  
*   1.0.0	2022-10-02	kampto		Modified to support Parent/Child apps. Add other capabilities and features. Origin from "DeVices Usage App" B.Ravenel - Hubitat
*/

import groovy.time.TimeCategory
import java.text.SimpleDateFormat

def setVersion() {
    state.name = "Device Time Active Tracker Child"
	state.version = "1.1.7"
    }

definition (
	name: "Device Time Active Tracker Child", namespace: "kampto", author: "T. K.",
	description: "Track Time a device is active. Attach to a variable",
	category: "General",
	parent: "kampto:Device Time Active Tracker",
	iconUrl: "",
	iconX2Url: "",
    importUrl: "https://raw.githubusercontent.com/kampto/Hubitat/main/Apps/DeviceTimeActiveTracker_Child",
    documentationLink: "https://community.hubitat.com/t/beta-device-active-time-tracker-app-device-on-timer-and-on-counter-with-variables-access/102896"
	)

preferences {page(name: "mainPage")}

//****************************************************  Page/Input Set-Up  ******************************************************//
def mainPage() {
    if (state.DeVices == null) state.DeVices = [:]
    if (state.DeVicesList == null) state.DeVicesList = []
    if (resetHour == null) {resetHour = 0}
    if (refreshMinutes == null) {refreshMinutes = 10}    //// ver1.1.3
    if (refreshSeconds == null) {refreshSeconds = 30}    //// ver1.1.3
    if (powerThreshold == null) {powerThreshold = 1} 
    if (capabilitySelect == null) {capabilitySelect = 1}
    if (allTotal == null) {allTotal = 0}   //// ver1.1.3
    state.byPassBool = false  //// ver1.1.4
                    
  dynamicPage(name: "", title: "", install: true, uninstall: true) {
  displayTitle() 
  section {
        label title: "<b>1. Name this child App</b>", required: true, submitOnChange: true, width: 3
        input name: "capabilitySelect", type: "enum", title: "<b>2. Select a capability to track.</b>", required: true, description: "Default = SWITCH On", defaultValue: "1", multiple: false, options:[["1":"SWITCH On"], ["2":"CONTACT Open"], ["3":"CONTACT Closed"], ["4":"POWER Monitor"], ["5":"TEMPERATURE Monitor"]], width: 3, submitOnChange: true, displayDuringSetup: false
        if (capabilitySelect == "1") {input "DeVices", "capability.switch", title: "<b>3. Select Devices to Track Switch On Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}
        else if (capabilitySelect == "2") {input "DeVices", "capability.contactSensor", title: "<b>3. Select Devices to Track Contact Open Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}
        else if (capabilitySelect == "3") {input "DeVices", "capability.contactSensor", title: "<b>3. Select Devices to Track Contact Closed Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}
        else if (capabilitySelect == "4") {input "DeVices", "capability.powerMeter", title: "<b>3. Select Power Meter Devices to Track On Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}
        else if (capabilitySelect == "5") {input "DeVices", "capability.temperatureMeasurement", title: "<b>3. Select Power Meter Devices to Track On Time</b>", required: true, multiple: true, submitOnChange: true, width: 5}    
        else {input "DeVices", "capability.switch", title: "<b>3. Select Devices to Track Switch On Time</b>", multiple: true, submitOnChange: true, width: 5}
        
    DeVices.each {dev ->
	    if(!state.DeVices["$dev.id"]) {
             if (capabilitySelect == "1") {state.DeVices["$dev.id"] = [start: dev.currentSwitch == "on" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}  
             else if (capabilitySelect == "2") {state.DeVices["$dev.id"] = [start: dev.currentContact == "open" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}
             else if (capabilitySelect == "3") {state.DeVices["$dev.id"] = [start: dev.currentContact == "closed" ? now() : 0, total: 0, var: "", varC: "", varCT: "", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}
             else if (capabilitySelect == "4") {state.DeVices["$dev.id"] = [start: dev.currentPower >= powerThreshold ? now() : 0, total: 0, var: "", varC: "", varCT: "", state: "off", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]}
             else if (capabilitySelect == "5") {state.DeVices["$dev.id"] = [start: dev.currentTemperature >= tempThreshold ? now() : 0, total: 0, var: "", varC: "", varCT: "", state: "off", time: "", allTime: 0, counts: 0, checkBox1: false, checkBox2: true, checkBox3: true]} 
             endif
	         state.DeVicesList += dev.id   
             }
	    }
                           
     if(DeVices) {
           	if(DeVices.id.sort() != state.DeVicesList.sort()) { 
				state.DeVicesList = DeVices.id
				Map newState = [:]
				DeVices.each{d ->  newState["$d.id"] = state.DeVices["$d.id"]}
				state.DeVices = newState
				}
                
          updated()
		  paragraph displayTable()
              ///////////////////////// Periodic Variable Select
			  if(state.newVar) {
				List vars = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                input "newVar", "enum", title: "(Optional) Select Hub Variable to recieve timer results. Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format to use in Rule Machine. Variables can also be viewed in a dashboard tile. Set table 'Variable Type' checkbox to match the variable type. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 9, options: vars, newLineAfter: true
				   if(newVar) {
					 state.DeVices[state.newVar].var = newVar
                     state.remove("newVar")
					 app.removeSetting("newVar")
					 paragraph "<script>{changeSubmit(this)}</script>"
					 }
				 } 
               else if(state.remVar) {
				 state.DeVices[state.remVar].var = ""
                 state.remove("remVar")
				 paragraph "<script>{changeSubmit(this)}</script>"
				 }
         
              ///////////////////////// Cumulative Variable Select  //// ver1.1.5
              if(state.newVarC) {
				List varsC = getAllGlobalVars().findAll{it.value.type == "integer" || it.value.type == "string"}.keySet().collect().sort{it.capitalize()}
                input "newVarC", "enum", title: "(Optional) Select Hub Variable to recieve timer results. Variables must first be made in Settings/Hub Variables as a String variable for Time Format XX:XX:XX or Number variable total XXXX seconds format to use in Rule Machine. Variables can also be viewed in a dashboard tile. Set table 'Variable Type' checkbox to match the variable type. If you dont make a variable the only way to see this data is in Time Format by opening this App.", submitOnChange: true, width: 9, options: varsC, newLineAfter: true
				   if(newVarC) {
					  state.DeVices[state.newVarC].varC = newVarC
                      state.remove("newVarC")
					  app.removeSetting("newVarC")
					  paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
              else if(state.remVarC) {
			    state.DeVices[state.remVarC].varC = ""
                state.remove("remVarC")
				paragraph "<script>{changeSubmit(this)}</script>"
				} 
         
              ///////////////////////// Device On Counts Number type Variable Select  //// ver1.1.5  
              if(state.newVarCT) {
				List varsCT = getAllGlobalVars().findAll{it.value.type == "integer"}.keySet().collect().sort{it.capitalize()}
                input "newVarCT", "enum", title: "(Optional) Select Hub Variable to recieve Device on counter results. Variables must first be made in Settings/Hub Variables as NUMBER variable. Use in Rule Machine or view on dashboard tile. If you dont make a variable the only way to see this data opening this App.", submitOnChange: true, width: 9, options: varsCT, newLineAfter: true
				   if(newVarCT) {
					  state.DeVices[state.newVarCT].varCT = newVarCT
                      state.remove("newVarCT")
					  app.removeSetting("newVarCT")
					  paragraph "<script>{changeSubmit(this)}</script>"
					  }
				 } 
              else if(state.remVarCT) {
				state.DeVices[state.remVarCT].varCT = ""
                state.remove("remVarCT")
				paragraph "<script>{changeSubmit(this)}</script>"
				} 
         
          input "reset", "button", title: "RESET Periodic Times, Counts, & Update Variables", width: 5
          input "refresh", "button", title: "REFRESH All Table & Update Variables", width: 4
          input name: "inDaysC", type: "bool", title: "Display Cumulative in Days?", defaultValue:false, submitOnChange:true, width: 3   //// Added ver1.1.6
		}
  }
//******************************************************* Input Section 2 *******************************************************//        
      section {
          if (capabilitySelect == "4") {
             input name: "powerThreshold", type: "number", title:"<b>Enter Power(w) threshold to call On/Active.</b> &nbsp<small>(Default = 1),&nbsp Applys to All</small>", defaultValue: "1", required: false,  submitOnChange:true, width: 6, style: 'margin-left:10px'
             input name: "dataDirection", type: "bool", title: "Track Above Threshold? Or below (unchecked).", defaultValue:true, submitOnChange:true, width: 5   //// Added ver1.1.7   
          }
          if (capabilitySelect == "5") {
             input name: "tempThreshold", type: "number", title:"<b>Enter Temperature threshold to call On/Active.</b> &nbsp<small>(Default = 50),&nbsp Applys to All</small>", defaultValue: "50", required: false, submitOnChange:true, width: 6, style: 'margin-left:10px'
             input name: "dataDirection", type: "bool", title: "Track Above Threshold? Or below (unchecked).", defaultValue:true, submitOnChange:true, width: 5   //// Added ver1.1.7     
          }
          input name: "autoRefresh", type: "enum", title: "<b>Auto Update Variables every XX Minuites or Seconds after the hour?</b>  &nbsp <small>Applys to Auto Update Checked Box(s) in Table only</small>", defaultValue:"Minutes", submitOnChange:true, options: ["Don't Update", "Minutes","Seconds"], required: false, style: 'margin-left:10px'
               if (autoRefresh == "Seconds") {input name: "refreshSeconds", type: "enum", title: ">> Select Variables Update interval in Seconds for On/Active devices only. &nbsp &nbsp <small>Default = 30sec &nbsp &nbsp Example:7:00:00, 7:00:30, 7:01:00,... NOTE: Faster updates will increase hub load. </small>", defaultValue: "30", submitOnChange: true,  options: ["5","10","15","20","30"], required: false, style: 'margin-left:70px'
                 }
               else if (autoRefresh == "Minutes") {input name: "refreshMinutes", type: "enum", title: ">> Select Variables Update interval in Minutes for On/Active devices only. &nbsp &nbsp <small>Default = 10min &nbsp &nbsp Example:7:00, 7:10, 7:20,...</small>", defaultValue: "10", submitOnChange: true,  options: ["1","2","3","4","5","10","15","20","30"], required: false, style: 'margin-left:70px'
                 }
               endif
          input name: "autoResetBool", type: "bool", title: "<b>Daily Reset all Timers & Update Variables at a specific Hour?</b> (Does not Reset Cumulative Timer) &nbsp <small>Applys to All</small>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (autoResetBool) {
             input name: "dayCountsReset", type: "bool", title: "Also Reset All On Counters?", defaultValue:true, submitOnChange:true, style: 'margin-left:70px'   
             input name: "resetHour", type: "enum", title: ">> Select an Hour for Auto Reset Everyday, 0 to 23. &nbsp &nbsp <small>Default = 0 (Midnight)</small>", defaultValue: "0", submitOnChange: true,  options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23"], required: false, style: 'margin-left:70px'
             }
          input name: "resetWhenOnBool", type: "bool", title: "<b>Reset & Restart all Timers & Update Variables when any Device becomes On/Active?</b> (Does not Reset Cumulative Times or Counts) &nbsp <small>Applys to All</small>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          input name: "remoteResetVarBool", type: "bool", title: "<b>Remote Reset Times & Counts by Hub Variable outside of App, For Optional Rule Machine access.</b> &nbsp <small>Applys to Remote Resest Checked Box(s) in Table only</small>", defaultValue:false, submitOnChange:true, style: 'margin-left:10px'
          if (remoteResetVarBool) {
            //input name: "resetVarAllBool", type: "bool", title: "Also Reset Cumulative total also with same variable?", defaultValue:false, submitOnChange:true, style: 'margin-left:70px'  
            input "resetVar", "enum", title: "Select Boolean Hub Variable to Reset checkboxed PERIODIC only Timers/Counts, Must make a Boolean variable first in Settings/Hub Variables. In Rule Machine set variable 'true' to trigger.", submitOnChange: true, style: 'margin-left:70px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}
            input "resetVarC", "enum", title: "Select Boolean Hub Variable to Reset checkboxed CUMULATIVE & PERIODIC Timers/Counts", submitOnChange: true, style: 'margin-left:70px',
				options: getAllGlobalVars().findAll{it.value.type == "boolean"}.keySet().collect().sort{it.capitalize()}  
               }
          input name: "logEnableBool", type: "bool", title: "<b>Enable Logging of App based Resets and Variable Refresh/Updates?</b> &nbsp <small>Applys to All</small>", defaultValue:true, submitOnChange:true, style: 'margin-left:10px'
      }
//********************************************************  Notes Section ******************************************************//        
   section("<b>Usage Notes:</b>", hideable: true, hidden: true) {  //// ver1.1.5
      paragraph "-App Page will not refresh itself, hit in App Refresh button to see latest timers, counts, and states. Variables/Timers will update in background."
	  paragraph "-Table will always display times in String Time format; XX:XX:XX. Timer Variables can be sent in Number or String format, depends on CheckBox."
      paragraph "-Only one capability can be used per child app. So Switch On or Contact Open etc.. Must make a seperate child app for different capability."
      paragraph "-Set up variables to trigger things in RM (maybe webcore?) using Number format based on total seconds elapsed. Use as Trigger, Counter, etc.."
      paragraph "-Variables values can be set up in dashboard tile for viewing Periodic times, total Cumulative times, or Total On Counts."
      paragraph "-Set up Reset Timers/Variables and/or counts by an in App schedule or by On state or by using a remote resest variable from RM."
      paragraph "-Set up Variable refresh updates by an in App schedule or based on state. Otherwise Variables will always update when device turns off or page refresh."
      }
  }
}
//********************************************************  App Page TABLE  ******************************************************//
String displayTable() {
    if(state.reset) {  //// Reset Periodic only timer/counts per device
		def dev = DeVices.find{"$it.id" == state.reset}
        state.DeVices[state.reset].start = now()
        state.DeVices[state.reset].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		state.DeVices[state.reset].total = 0
        state.DeVices[state.reset].counts = 0   //// ver1.1.3
      	state.remove("reset")
	    }
    
    if(state.resetTotal) {  //// Reset Cumulative and Periodic timers per device      //// ver1.1.3       
		def dev = DeVices.find{"$it.id" == state.resetTotal}
        state.DeVices[state.resetTotal].start = now()    //// ver1.1.4  
        state.DeVices[state.resetTotal].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
        state.DeVices[state.resetTotal].total = 0
        state.DeVices[state.resetTotal].counts = 0
        state.DeVices[state.resetTotal].allTime = 0
        state.remove("resetTotal")
	    }
    ////////////// Variable String or Number Check Box
    if(state.checkedBox1) {       //// ver1.1.3
        def dev = DeVices.find{"$it.id" == state.checkedBox1}  
	    state.DeVices[state.checkedBox1].checkBox1 = true
        state.remove("checkedBox1")
	    }
	else if(state.uncheckedBox1) {
       def dev = DeVices.find{"$it.id" == state.uncheckedBox1}  
	   state.DeVices[state.uncheckedBox1].checkBox1 = false
       state.remove("uncheckedBox1")
	   }
    endif
    ////////////// Variable Auto Refresh Check Box
    if(state.checkedBox2) {      //// ver1.1.3
      def dev = DeVices.find{"$it.id" == state.checkedBox2}  
	  state.DeVices[state.checkedBox2].checkBox2 = true
      state.remove("checkedBox2")
	  }
	else if(state.uncheckedBox2) {
      def dev = DeVices.find{"$it.id" == state.uncheckedBox2}  
	  state.DeVices[state.uncheckedBox2].checkBox2 = false
      state.remove("uncheckedBox2")
	  }
    endif
    ////////////// Remote Variable Reset Check Box
    if(state.checkedBox3) {      //// ver1.1.4
      def dev = DeVices.find{"$it.id" == state.checkedBox3}  
	  state.DeVices[state.checkedBox3].checkBox3 = true
      state.remove("checkedBox3")
	  }
	else if(state.uncheckedBox3) {
      def dev = DeVices.find{"$it.id" == state.uncheckedBox3}  
	  state.DeVices[state.uncheckedBox3].checkBox3 = false
      state.remove("uncheckedBox3")
	  }
    endif
    
	String str = "<script src='https://code.iconify.design/iconify-icon/1.0.0/iconify-icon.min.js'></script>"   //////// font-weight: bold !important; word-wrap: break-word !important; white-space: normal!important
	str += "<style>.mdl-data-table tbody tr:hover{background-color:inherit} .tstat-col td, .tstat-col th {font-size:15px !important; padding:2px 4px;text-align:center} + .tstat-col td {font-size:13px  }" +
        "</style><div style='overflow-x:auto'><table class='mdl-data-table tstat-col' style=';border:3px solid black'>" +
		"<thead><tr style='border-bottom:2px solid black'><th style='border-right:2px solid black'>Device</th>" +
		"<th>Periodic<br>Active<br>OnTime</th>" +
        "<th>State</th>" +
        "<th>On<br>Counts</th>" +
        "<th>Reset</th>" +
		"<th>Last<br>Reset</th>" +
		"<th>Periodic<br>Linked<br>Variable</th>"+
        "<th>Counts<br>Linked<br>Variable</th>"+ 
        "<th>Allow<br>Remote<br>Reset?</th>"+      //// ver1.1.4 
        "<th>Variable<br>Data<br>Type?</th>"+    //// ver1.1.3
        "<th style='border-right:3px solid black'>Auto<br>Update<br>Variable?</th>"+     //// ver1.1.3
        "<th>${inDaysC ? "Cumulative<br>Total Days" : "Cumulative<br>Total Time"}</th>"+    //// ver1.1.6
        "<th>Reset<br>Total</th>"+   //// ver1.1.0
        "<th>Cumulative<br>Linked<br>Variable</th></tr></thead>"   //// ver1.1.4
	   
    DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
        String thisVar = state.DeVices["$dev.id"].var
        String thisVarC = state.DeVices["$dev.id"].varC   //// ver1.1.4
        String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
         
        ////////// Active/On Time Calc
        int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5 
        int total = state.DeVices["$dev.id"].total / 1000    
        int intTime = total  //// Added ver1.1.0
        int hours = total / 3600
        total = total % 3600
	    int mins = total / 60
	    int secs = total % 60
	    String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
        ////////// Total All Cumalative Time Calc   //// ver1.1.3
        int allTotal = state.DeVices["$dev.id"].allTime /1000
        int intAllTime = allTotal
        int allHours = allTotal / 3600  
	    allTotal = allTotal % 3600
	    int allMins = allTotal / 60
	    int allSecs = allTotal % 60
        String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"
            float AllTimeDays = (intAllTime / 86400) as float //// ver1.1.6
            if (inDaysC) {allTimeT = String.format("%.3f", AllTimeDays)} // For table Only  //// ver1.1.6
            else {allTimeT = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"}  // For table Only
                       
        if (thisVar) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time)}
        if (thisVarC) {state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)}  //// ver1.1.4 
        if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// Added ver1.1.5 
        if (logEnableBool) {log.info "App: ${app.label} - Page Refresh, Device ${dev.id}, Var *${thisVar}* to ${time} or ${intTime}sec, Cumulative Var *${thisVarC}* ${allTime}time, ${AllTimeDays}days, ${intAllTime}sec, Counts Var *${thisVarC}* Counts=${counts}"}  //// Added ver1.1.3
                
        String devLink = "<a href='/device/edit/$dev.id' target='_blank' title='Open Device Page for $dev'>$dev"
		String reset = buttonLink("d$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")
        String resetTotal = buttonLink("t$dev.id", "<iconify-icon icon='bx:reset'></iconify-icon>", "black", "23px")  //// ver1.1.3
        String var = thisVar ? buttonLink("r$dev.id", thisVar, "purple") : buttonLink("n$dev.id", "Select", "green")
        String varC = thisVarC ? buttonLink("y$dev.id", thisVarC, "purple") : buttonLink("z$dev.id", "Select", "green")  //// ver1.1.4
        String varCT = thisVarCT ? buttonLink("v$dev.id", thisVarCT, "purple") : buttonLink("w$dev.id", "Select", "green")  //// ver1.1.5
        
        String checkedBox1T = (state.DeVices["$dev.id"].checkBox1) ? buttonLink("a$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("b$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedBox2T = (state.DeVices["$dev.id"].checkBox2) ? buttonLink("e$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("f$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.3
        String checkedBox3T = (state.DeVices["$dev.id"].checkBox3) ? buttonLink("g$dev.id", "<iconify-icon icon='material-symbols:check-box'></iconify-icon>", "green", "23px") : buttonLink("h$dev.id", "<iconify-icon icon='material-symbols:check-box-outline-blank'></iconify-icon>", "black", "23px")   //// ver1.1.4
                              
        str += "<tr style='color:black'><td style='border-right:2px solid black'>$devLink</td>" 
		if (capabilitySelect == "1") { str += "<td style='font-weight:bold; color:${dev.currentSwitch == "on" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentSwitch == "on" ? "green" : "red"}'title='State $dev'>$dev.currentSwitch </td>"}
        else if (capabilitySelect == "2") {str += "<td style='font-weight:bold; color:${dev.currentContact == "open" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentContact == "open" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>" }
        else if (capabilitySelect == "3") {str += "<td style='font-weight:bold; color:${dev.currentContact == "closed" ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.dev.currentContact == "closed" ? "green" : "red"}'title='State $dev'>$dev.currentContact</td>"} 
        else if (capabilitySelect == "4" && dataDirection) {str += "<td style='font-weight:bold; color:${dev.currentPower >= powerThreshold ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentPower >= powerThreshold ? "green" : "red"}'title='State $dev'>$dev.currentPower</td>"} 
        else if (capabilitySelect == "4" && dataDirection == false) {str += "<td style='font-weight:bold; color:${dev.currentPower >= powerThreshold ? "red" : "green"}'>$time</td>" + "<td style='color:${dev.currentPower >= powerThreshold ? "red" : "green"}'title='State $dev'>$dev.currentPower</td>"} 
        else if (capabilitySelect == "5" && dataDirection) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= tempThreshold ? "green" : "red"}'>$time</td>" + "<td style='color:${dev.currentTemperature >= tempThreshold ? "green" : "red"}'title='State $dev'>$dev.currentTemperature</td>"} 
        else if (capabilitySelect == "5" && dataDirection == false) {str += "<td style='font-weight:bold; color:${dev.currentTemperature >= tempThreshold ? "red" : "green"}'>$time</td>" + "<td style='color:${dev.currentTemperature >= tempThreshold ? "red" : "green"}'title='State $dev'>$dev.currentTemperature</td>"} 
        endif 
                   
        str += "<td style='font-weight:bold' title='Total On Counts' >${state.DeVices["$dev.id"].counts}</td>" +
        "<td title='Reset for $dev' style='padding:0px 0px'>$reset</td>" +
		"<td style='width: 100px' title='Time of last Reset for $dev'>${state.DeVices["$dev.id"].time ?: ""} </td>" +  
        "<td title='${thisVar ? "Deselect $thisVar" : "Select Hub Variable"}'>$var</td>" +
        "<td title='${thisVarCT ? "Deselect $thisVar" : "Select Hub NUMBER Variable"}'>$varCT</td>" +    //// ver1.1.5
        "<td title='Allow Remote reset for this device'>$checkedBox3T</td>" +     //// ver1.1.4    
        "<td title='Check Box to update Time variable in Number format XXXXsec, otherwise String time format XX:XX:XX'>$checkedBox1T</td>" +     //// ver1.1.3
        "<td style='border-right:3px solid black' title='Check Box to Apply Auto Variable refresh Update interval from below'>$checkedBox2T</td>" +   //// ver1.1.3  
        "<td style='font-weight:bold' title='${inDaysC ? "Total Cumulative Time in Days" : "Total Cumulative Time"}'>$allTimeT</td>" +   //// ver1.1.6     
        "<td title='Reset Cumulative Total for $dev' style='padding:0px 0px'>$resetTotal</td>" +  //// ver1.1.0
        "<td title='${thisVarC ? "Deselect $thisVarC" : "Select Hub Variable"}'>$varC</td></tr>"    //// ver1.1.4
     }
   	str += "</table></div>"
	str
}

String buttonLink(String btnName, String linkText, color = "#1A77C9", font = "13px") {
   "<div class='form-group'><input type='hidden' name='${btnName}.type' value='button'></div><div><div class='submitOnChange' onclick='buttonClick(this)' style='color:$color;cursor:pointer;font-size:$font'>$linkText</div></div><input type='hidden' name='settings[$btnName]' value=''>"
}

//***************************************************  Schedules and Subscribes ******************************************************//
void initialize() {
    if (capabilitySelect == "1") {
	subscribe(DeVices, "switch.on", onHandler)
	subscribe(DeVices, "switch.off", offHandler)
    }
    else if (capabilitySelect == "2") {
	subscribe(DeVices, "contact.open", onHandler)
    subscribe(DeVices, "contact.closed", offHandler)
    }
    else if (capabilitySelect == "3") {
	subscribe(DeVices, "contact.open", offHandler)
	subscribe(DeVices, "contact.closed", onHandler)
    }
    else if (capabilitySelect == "4") { //// ver1.0.2
        subscribe(DeVices, "power", powerHandler) 
    }    
    else if (capabilitySelect == "5") { //// ver1.1.7
        subscribe(DeVices, "temperature", tempHandler) 
    }    
    endif  
        
    if (remoteResetVarBool && resetVar) {
        subscribe(location, "variable:${resetVar}.true", remoteReset)
        setGlobalVar(resetVar, false)
        }
    if (remoteResetVarBool && resetVarC) {  //// ver1.1.4
        subscribe(location, "variable:${resetVarC}.true", remoteReset)
        setGlobalVar(resetVarC, false) 
        }   
       
    if (autoResetBool) { schedule("2 0 ${resetHour} ? * * *", dailySaveCountsReset) } // Add 2sec after the hour so it doesnt potentially confict with Auto refresh at same time  //// Added ver1.0.1
   
  	if (autoRefresh == "Minutes") { schedule("0 */${refreshMinutes} * ? * * *", refreshHandler) }   //// ver1.0.3
    else if (autoRefresh == "Seconds") { schedule("*/${refreshSeconds} * * ? * * *", refreshHandler) }   //// ver1.1.2
    endif
}

//******************************************************  Handlers / Functions ************************************************************//
def powerHandler(evt) {  //// ver1.1.6
    //log.debug "TESTpower1...powerHandler() called: ${evt.name} = ${evt.device.currentPower}...state.power = ${state.DeVices[evt.device.id].state}... evt.device.id: ${evt.device.id}"
    if (dataDirection && evt.device.currentPower >= powerThreshold && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (dataDirection && evt.device.currentPower < powerThreshold && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (dataDirection == false && evt.device.currentPower < powerThreshold && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (dataDirection == false && evt.device.currentPower >= powerThreshold && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
    //log.debug "TESTpower2...powerHandler() called: ${evt.name} = ${evt.device.currentPower}...state.power = ${state.DeVices[evt.device.id].state}... evt.device.id: ${evt.device.id}"
}
  
def tempHandler(evt) {  //// ver1.1.7
    if (dataDirection && evt.device.currentTemperature >= tempThreshold && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (dataDirection && evt.device.currentTemperature < tempThreshold && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    else if (dataDirection == false && evt.device.currentTemperature < tempThreshold && state.DeVices[evt.device.id].state == "off") {state.DeVices[evt.device.id].state = "on"; onHandler(evt)}
    else if (dataDirection == false && evt.device.currentTemperature >= tempThreshold && state.DeVices[evt.device.id].state == "on") {state.DeVices[evt.device.id].state = "off"; offHandler(evt)}
    endif
} 
    
void onHandler(evt) {
    state.DeVices[evt.device.id].start = now()
    state.DeVices[evt.device.id].counts += 1  //// ver1.1.3
    if (resetWhenOnBool) {deviceOnSaveCountsReset()} //// ver1.1.0
}

void offHandler(evt) {
    state.DeVices[evt.device.id].total += now() - state.DeVices[evt.device.id].start
    state.DeVices[evt.device.id].allTime = state.DeVices[evt.device.id].allTime + (now() - state.DeVices[evt.device.id].start) //// ver 1.1.3
	      String thisVar = state.DeVices[evt.device.id].var
          String thisVarC = state.DeVices[evt.device.id].varC   //// ver1.1.4
          String thisVarCT = state.DeVices[evt.device.id].varCT   //// ver1.1.5
    
            ////////// Active/On Time Calc   
            int counts = state.DeVices[evt.device.id].counts    //// ver1.1.5   
            int total = state.DeVices[evt.device.id].total /1000    
            int intTime = total  //// ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices[evt.device.id].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
             if (thisVar) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
             if (thisVarC) {state.DeVices[evt.device.id].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)   //// ver1.1.4 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${evt.device.id} now Inactive/Off, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
             if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5   
  }

void appButtonHandler(btn) {
    if (btn == "reset") resetTimers() //// ver1.0.1
    else if (btn == "refresh") refreshHandler()  //// ver1.0.3
    else if (btn.startsWith("n")) state.newVar = btn.minus("n")
	else if (btn.startsWith("r")) state.remVar = btn.minus("r")
    else if (btn.startsWith("z")) state.newVarC = btn.minus("z")   //// ver1.1.4
	else if (btn.startsWith("y")) state.remVarC = btn.minus("y")   //// ver1.1.4 
    else if (btn.startsWith("w")) state.newVarCT = btn.minus("w")   //// ver1.1.5
	else if (btn.startsWith("v")) state.remVarCT = btn.minus("v")   //// ver1.1.5     
    else if (btn.startsWith("t")) state.resetTotal = btn.minus("t")   //// ver1.1.3 
    else if (btn.startsWith("a")) state.uncheckedBox1 = btn.minus("a")  //// ver1.1.3   
    else if (btn.startsWith("b")) state.checkedBox1 = btn.minus("b")    //// ver1.1.3 
    else if (btn.startsWith("e")) state.uncheckedBox2 = btn.minus("e")  //// ver1.1.3  
    else if (btn.startsWith("f")) state.checkedBox2 = btn.minus("f")    //// ver1.1.3 
    else if (btn.startsWith("g")) state.uncheckedBox3 = btn.minus("g")   //// ver1.1.4  
    else if (btn.startsWith("h")) state.checkedBox3 = btn.minus("h")   //// ver1.1.4       
    else state.reset = btn.minus("d")
    }

def refreshHandler() {   //// Added ver 1.0.3
    state.DeVices.each {k, v ->
        def dev = DeVices.find{"$it.id" == k}
        ///////////// Update Times if Active/On
        if (capabilitySelect == "1" && dev.currentSwitch == "on") {
           	state.DeVices[k].total += now() - state.DeVices[k].start
			state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start) //// ver1.1.3
            state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "2" && dev.currentContact == "open") {
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
            }
        else if (capabilitySelect == "3" && dev.currentContact == "closed") {
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "4" && dev.currentPower >= powerThreshold && dataDirection) || (capabilitySelect == "4" && dev.currentPower < powerThreshold && dataDirection == false)) { //// ver1.0.2
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)  //// ver1.1.3
			state.DeVices[k].start = now()
		    }
        else if ((capabilitySelect == "5" && dev.currentTemperature >= tempThreshold && dataDirection) || (capabilitySelect == "5" && dev.currentTemperature < tempThreshold && dataDirection == false)) { //// ver1.1.7
        	state.DeVices[k].total += now() - state.DeVices[k].start
            state.DeVices[k].allTime = state.DeVices[k].allTime + (now() - state.DeVices[k].start)   
			state.DeVices[k].start = now()
		    } 
        endif
       }
        //////////// Update Variables if Active/On  
        DeVices.sort{it.displayName.toLowerCase()}.each {dev ->
          String thisVar = state.DeVices["$dev.id"].var
          String thisVarC = state.DeVices["$dev.id"].varC    //// ver1.1.4
          String thisVarCT = state.DeVices["$dev.id"].varCT   //// ver1.1.5
            
            ////////// Active/On Time Calc   
            int counts = state.DeVices["$dev.id"].counts   //// ver1.1.5
            int total = state.DeVices["$dev.id"].total /1000    
            int intTime = total  //// Added ver1.1.0
            int hours = total / 3600
	        total = total % 3600
	        int mins = total / 60
	        int secs = total % 60
	        String time = "$hours:${mins < 10 ? "0" : ""}$mins:${secs < 10 ? "0" : ""}$secs"
            
            ////////// Total All Cumalative Time Calc   //// ver1.1.3
            int allTotal = state.DeVices["$dev.id"].allTime /1000      
            int intAllTime = allTotal
            int allHours = allTotal / 3600  
	        allTotal = allTotal % 3600
	        int allMins = allTotal / 60
	        int allSecs = allTotal % 60    
            String allTime = "$allHours:${allMins < 10 ? "0" : ""}$allMins:${allSecs < 10 ? "0" : ""}$allSecs"   
               
             if ((thisVar && state.DeVices["$dev.id"].checkBox2) || (thisVar && state.byPassBool)) {  //// ver1.1.3 
               state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVar, intTime) : setGlobalVar(thisVar, time) 
               if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Periodic Var *${thisVar}* to ${time} or ${intTime}sec, Counts=${counts}"}  //// ver1.1.3                  
             }
             if ((thisVarC && state.DeVices["$dev.id"].checkBox2) || (thisVarC && state.byPassBool)) {  //// ver1.1.4 
               state.DeVices["$dev.id"].checkBox1 ? setGlobalVar(thisVarC, intAllTime) : setGlobalVar(thisVarC, allTime)
               if (logEnableBool) {log.info "App: ${app.label} - Device ${dev.id}, Cumulative Var *${thisVarC}* ${allTime} or ${intAllTime}sec, Counts=${counts}"}   
             }
             if (thisVarCT) {setGlobalVar(thisVarCT, counts)}  //// ver1.1.5 
                                                     
         }
    state.byPassBool = false  // Reset the bypass  //// ver1.1.3
 }

//************************************************* Reset Functions ********************************************************//
void dailySaveCountsReset(evt = null) { //// Used by Auto reset daily hour rest to save counts or not  //// ver1.1.4
    if (dayCountsReset) {state.byPassBool = false}
    else state.byPassBool = true  
    resetTimers()
}

void deviceOnSaveCountsReset(evt = null) { //// Device On reset options to prevent counter reset  //// ver1.1.3
    state.byPassBool = true  
    resetTimers()
}

/////////////////// Remote Reset Timers and Variables  
void remoteReset(evt = null) {   //// ver1.1.4 
    state.DeVices.each{k, v ->
		def dev = DeVices.find{"$it.id" == k}
        if (state.DeVices[k].checkBox3) {
            state.DeVices[k].start = now()   
            state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		    state.DeVices[k].total = 0
            if (state.byPassBool == false) {state.DeVices[k].counts = 0}  //// ver1.1.3
            //if (resetVarAllBool && resetVar && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0}  
            if (resetVarC && state.DeVices[k].checkBox3) {state.DeVices[k].allTime = 0 } 
            }
     }
    if (logEnableBool) {log.debug "App: ${app.label} - Remote Reset Selected Timers to 0 Happening ..........."}
    if(resetVar) setGlobalVar(resetVar, false)
    if(resetVarC) setGlobalVar(resetVarC, false)  
    refreshHandler()     
}

/////////////////// Auto and in App Reset Timers and Variables 
void resetTimers(evt = null) {
    state.DeVices.each{k, v ->
        def dev = DeVices.find{"$it.id" == k}
            state.DeVices[k].start = now()   
            state.DeVices[k].time = new Date().format("MM-dd-yyyy ${location.timeFormat == "12" ? "h:mm:ss a" : "HH:mm:ss"}")
		    state.DeVices[k].total = 0
            if (state.byPassBool == false) {state.DeVices[k].counts = 0}  //// ver1.1.3
        }
    if (logEnableBool) {log.debug "App: ${app.label} - App Periodic Active/On All Timers Reset to 0 Happening ..........."}
    refreshHandler() //// ver1.0.3
}
//****************************************************** Other Stuff ********************************************************//
def updated() {
    unsubscribe()
    unschedule()
    initialize()
}
def installed() {
}
def getFormat(type, myText="") {		
    if(type == "title") return "<h3 style='color:#0000ff;font-weight: bold'>${myText}</h3>"
}
def displayTitle() {
    setVersion()
    theName = app.label
    if(theName == null || theName == "") theName = "New Child App"
	section (getFormat("title",  "App: ${state.name} - ${"ver " + state.version}")) {}
}

